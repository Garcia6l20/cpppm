name: build-examples

on:
  push:
    paths:
    - '**.py'
    - '**.cpp'
    - '**.yml'

  pull_request:

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    strategy:
      matrix:
        config:
          - {
            name: "Ubuntu 20.04 (gcc)",
            os: ubuntu-20.04,
            compiler: gcc,
            compiler_version: 9,
            arch: x86_64,
            libcxx: libstdc++11
          }
          - {
            name: "Ubuntu 20.04 (clang)",
            os: ubuntu-20.04,
            compiler: clang,
            compiler_version: 10,
            arch: x86_64,
            libcxx: libc++
          }
          - {
            name: "Windows MSVC 2019",
            os: windows-latest,
            compiler: "Visual Studio",
            compiler_version: 16,
            arch: x86_64,
#            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
          }

    steps:
      - uses: actions/checkout@v2

      - name: Install requirements
        shell: bash
        if: startsWith(matrix.config.os, 'windows') != true
        run: |
          sudo apt-get install python3-pip

      - name: Set up Python ${{ matrix.python-version }}
        if: startsWith(matrix.config.os, 'windows')
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install cpppm
        shell: bash
        run: |
          python -m pip install .
          python -m pip install --upgrade conan

      - name: Build examples
        shell: bash
        run: |
          python ./examples/project.py config set toolchain=${{ matrix.config.compiler }}-${{ matrix.config.compiler_version }}-${{ matrix.config.arch }} \
                                           libcxx=${{ matrix.config.libcxx }}
          python ./examples/project.py -d test

      - name: Conan package
        shell: bash
        env:
          _CONAN_USERNAME: ${{ secrets.CONAN_USERNAME }}
          _CONAN_API_KEY: ${{ secrets.CONAN_API_KEY }}
        run: |
          cd ./examples
          conan remote add cpppm https://api.bintray.com/conan/${_CONAN_USERNAME}/cpppm
          conan user -p ${_CONAN_API_KEY} -r cpppm ${_CONAN_USERNAME}
          conan create . \
              -s compiler=${{ matrix.config.compiler }} \
              -s compiler.version=${{ matrix.config.compiler_version }} \
              -s compiler.libcxx=${{ matrix.config.libcxx }}

          conan upload -c cpppm-examples -r cpppm --all
          conan remove -f cpppm-examples

      - name: Conan test package
        shell: bash
        run: |
          cd ./test_package
          ./project.py config set toolchain=${{ matrix.config.compiler }}-${{ matrix.config.compiler_version }}-${{ matrix.config.arch }} \
                                  libcxx=${{ matrix.config.libcxx }}
          ./project.py -d run

  clean:
    name: Cleanup conan remote
    runs-on: ubuntu-20.04
    needs: build
    if: always()
    steps:
      - name: Install conan
        shell: bash
        run: |
          sudo python3 -m pip install --upgrade conan

      - name: Cleanup
        shell: bash
        env:
          _CONAN_USERNAME: ${{ secrets.CONAN_USERNAME }}
          _CONAN_API_KEY: ${{ secrets.CONAN_API_KEY }}
        run: |
          conan remote add cpppm https://api.bintray.com/conan/${_CONAN_USERNAME}/cpppm
          conan user -p ${_CONAN_API_KEY} -r cpppm ${_CONAN_USERNAME}
          conan remove -f cpppm-examples -r cpppm
