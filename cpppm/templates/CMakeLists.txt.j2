cmake_minimum_required(VERSION 3.15)

{% if project.name -%}
set(CMAKE_INCLUDE_CURRENT_DIR ON)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/bin)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${CMAKE_CURRENT_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${CMAKE_CURRENT_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_CURRENT_BINARY_DIR}/bin)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${CMAKE_CURRENT_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_CURRENT_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_CURRENT_BINARY_DIR}/bin)

include(GenerateExportHeader)

project({{project.name}})

{% if project.uses_conan and project.is_root -%}
include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
conan_basic_setup(TARGETS)
conan_include_build_modules()
{%- endif %}

message(STATUS "cpppm: generators: {{ project.generators }}")
{%- for generator in project.generators %}
message(STATUS "cpppm: setting up {{ generator.name }} ({{ generator.event_type }})")
add_custom_command(OUTPUT {{ generator.target | to_dependencies }}
    COMMAND {{ python }} {{ root_project.script_path | absolute_path }} __cpppm_event__ {{ generator.sha1 }}
    DEPENDS {{ generator.project.script_path | absolute_path }} {{ generator.depends | to_dependencies }}
    COMMENT "-- cpppm: firing {{ generator.name }} ({{ generator.event_type }})"
)
{% for output in generator.target %}
add_custom_target({{ output.name }}-generator DEPENDS {{ output.as_posix() }})
{% endfor %}
{% endfor %}

# subprojects
{% for subproject in project.subprojects %}
add_subdirectory({{subproject.build_path | absolute_path }} {{subproject.build_path | absolute_path }})
{% endfor %}

{% endif %}

{%- for target in project.targets %}
{% include "CMakeLists.target.j2" %}
{% endfor -%}
